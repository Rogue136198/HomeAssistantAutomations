blueprint:
  name: Frigate Video Notification
  description: ""
  domain: automation
  source_url: https://github.com/Rogue136198/HomeAssistantAutomations/blob/main/frigate_video_notification.yaml
  input:
    camera:
      name: Frigate Camera
      description: The name of the camera as defined in your frigate configuration.
    notify_group:
      name: Notification Group
      description: The name of the notification group to call.
      default: ''
    camera_page:
      name: Camera URL
      description: The URL of your camera page e.g. /lovelace/camera
      default: '/lovelace/camera'
    base_url:
      name: (Optional) Base URL
      description: 'The external url for your Home Assistant instance. This will default
        to a relative URL and will open the clips in the app instead of the browser,
        which does not work well on iOS.'
      default: ''
    critical:
      name: (Optional) Critical Notification
      description: Send as a critical notification to the mobile device.
      default: false
      selector:
        boolean:
    zone_filter:
      name: (Optional) Zone Filter
      description: Only notify if object has entered a defined zone.
      default: false
      selector:
        boolean:
    zones:
      name: (Optional) Trigger Zones
      description: A list (-) of zones you wish to recieve notifications for.
      default: []
      selector:
        object: {}
    labels:
      name: (Optional) Trigger Objects
      description: A list (-) of objects you wish to recieve notifications for.
      default: []
      selector:
        object: {}
    presence_filter:
      name: (Optional) Presence Filter
      description: Only notify if selected presence entity is not "home".
      default: ''
      selector:
        entity: {}
    cooldown:
      name: (Optional) Cooldown
      description: Delay before sending another notification for this camera after
        the last event.
      default: 30
      selector:
        number:
          max: 300
          min: 0
          unit_of_measurement: seconds
          mode: slider
          step: 1
    silence_timer:
      name: (Optional) Silence New Object Notifications
      description: "How long to silence notifications for this camera when requested\
        \ as part of the actionable notification. Note: This only applies to new objects.\
        \ Existing tracked objects \n"
      default: 30
      selector:
        number:
          max: 300
          min: 0
          unit_of_measurement: minutes
          mode: slider
          step: 1
mode: parallel
trigger_variables:
  camera: !input 'camera'
trigger:
- platform: event
  event_type: mobile_app_notification_action
  event_data:
    action: silence-{{ camera }}
  id: silence
- platform: mqtt
  topic: frigate/events
  payload: '{{ camera }}/new'
  value_template: '{{ value_json[''after''][''camera''] }}/{{ value_json[''type'']}}'
  id: frigate-event
variables:
  camera: !input 'camera'
  camera_name: '{{ camera | replace(''_'', '' '') | title }}'
  camera_page: !input 'camera_page'
  base_url: !input 'base_url'
  critical: !input 'critical'
  group_target: !input 'notify_group'
  zone_only: !input 'zone_filter'
  input_zones: !input 'zones'
  zones: '{{ input_zones | list }}'
  input_labels: !input 'labels'
  labels: '{{ input_labels | list }}'
  presence_entity: !input 'presence_filter'
  cooldown: !input 'cooldown'
  fps_value: '{{ states(''sensor.'' + camera + ''_camera_fps'') }}'
  fps: '{{ fps_value|int if is_number(fps_value) or 5 }}'
action:
- choose:
  - alias: Silence New Object Notifications
    conditions:
    - condition: trigger
      id: silence
    sequence:
    - service: automation.turn_off
      target:
        entity_id: '{{ this.entity_id }}'
      data:
        stop_actions: false
    - delay:
        minutes: !input 'silence_timer'
    - service: automation.turn_on
      target:
        entity_id: '{{ this.entity_id }}'
  - alias: Frigate Event
    conditions:
    - condition: trigger
      id: frigate-event
    - '{{ is_state(this.entity_id, ''on'') }}'
    - '{{ not this.attributes.last_triggered or (now() - this.attributes.last_triggered).seconds
      > cooldown }}'
    sequence:
    - variables:
        id: '{{ trigger.payload_json[''after''][''id''] }}'
        object: '{{ trigger.payload_json[''after''][''label''] }}'
        label: '{{ object | title }}'
        initial_home: '{{ presence_entity != '''' and is_state(presence_entity, ''home'')
          }}'
        initial_entered_zones: '{{ trigger.payload_json[''after''][''entered_zones'']
          }}'
    - alias: Notifications enabled for object label
      condition: template
      value_template: '{{ not labels|length or object in labels }}'
    - alias: Notify on new object
      choose:
      - conditions:
        - '{{ not zone_only or initial_entered_zones|length > 0 }}'
        - '{{ not zones|length or zones|select(''in'', initial_entered_zones)|list|length
          > 0 }}'
        - '{{ not initial_home }}'
        sequence:
        - parallel:
          - service: notify.{{ group_target }}
            data:
              title:  '{{ label }} seen • {{ camera_name }}'
              message: '{{ camera_name }}'
              data:
                tag: '{{ id }}'
                group: '{{ camera_name }}'
                clickAction: '{{base_url}}/api/frigate/notifications/{{id}}/{{camera}}/clip.mp4'
                channel: Cameras
                ttl: '{{ iif(critical, 0, 3600000) }}'
                priority: '{{ iif(critical, ''high'', ''normal'') }}'
                url: '{{base_url}}/api/frigate/notifications/{{id}}/{{camera}}/clip.mp4'
                attachment:
                  url: '{{base_url}}/api/frigate/notifications/{{id}}/{{camera}}/clip.mp4'
                push:
                  interruption-level: '{{ iif(critical, ''critical'', ''active'')
                    }}'
                actions:
                - action: URI
                  title: View Cameras
                  uri: '{{base_url}}/{{camera_page}}'
                - action: silence-{{ camera }}
                  title: Silence
                  destructive: true
          - service: notify.{{ group_target }}
            data:
              title:  '{{ label }} seen • {{ camera_name }}'
              message: '{{ camera_name }}'
              data:
                tag: '{{ id }}'
                group: '{{ camera_name }}'
                video: /api/frigate/notifications/{{id}}/{{camera}}/clip.mp4      
                clickAction: '{{base_url}}/api/frigate/notifications/{{id}}/{{camera}}/clip.mp4'
                channel: Cameras
                ttl: '{{ iif(critical, 0, 3600000) }}'
                priority: '{{ iif(critical, ''high'', ''normal'') }}'
                url: '{{base_url}}/api/frigate/notifications/{{id}}/{{camera}}/clip.mp4'
                attachment:
                  url: '{{base_url}}/api/frigate/notifications/{{id}}/{{camera}}/clip.mp4'
                push:
                  interruption-level: '{{ iif(critical, ''critical'', ''active'')
                    }}'
                actions:
                - action: URI
                  title: View Clip
                  uri: '{{base_url}}/api/frigate/notifications/{{id}}/{{camera}}/clip.mp4'
                - action: URI
                  title: View Cameras
                  uri: '{{base_url}}/{{camera_page}}'
                - action: silence-{{ camera }}
                  title: Silence
                  destructive: true
